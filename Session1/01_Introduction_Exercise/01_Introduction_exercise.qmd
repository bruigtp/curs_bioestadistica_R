---
title: "Exercices Session I: Introduction to R and data management"
subtitle: "Applied Biostatistics Course with R"
author: "Biostatistics Support and Research Unit, IGTP"
format: 
  html:
    embed-resources: true
    toc: true
execute: 
  echo: true
editor_options: 
  chunk_output_type: console
---

```{r}
setwd(r"(I:\CTebe\5_Formacio\4_Cursos_campus\2_Estadistica2025\Materials\Exercises\01_Introduction)")

library(dplyr)
load(file.path(r"(I:\CTebe\2_Projectes\2024_06DIVINE_package\4_Productes\DIVINE\data)", "demographic.rda"))
load(file.path(r"(I:\CTebe\2_Projectes\2024_06DIVINE_package\4_Productes\DIVINE\data)", "comorbidities.rda"))

divine <- demographic |> 
  left_join(comorbidities, by = c("record_id", "covid_wave", "center")) |> 
  dplyr::select(-race, -body_mass_index, -starts_with("ceiling"))

openxlsx::write.xlsx(divine, file = "divine.xlsx")

load(file.path(r"(I:\CTebe\2_Projectes\2024_06DIVINE_package\4_Productes\DIVINE\data)", "closure.rda"))

closure <- closure |> 
  rename_all(~gsub("(.*)_date", "time_\\1", .))

write.table(closure, file = "closure.txt")
```

1. Read excel and save it in as an object.

```{r}
library(readxl)
divine <- read_excel("divine.xlsx")
```

2. Check the structure of the data. What class is the object? Which class are vectors stored in its columns? How many rows and columns has the object?

```{r}
str(divine)

#Number of rows and columns:
nrow(divine)
ncol(divine)
```

3. Quick view of the data. See how the object looks like and the information it contains.

```{r}
View(divine)
```

4. How many missings has the height?

```{r}
table(is.na(divine$height))
```

5. What is the minimum and maximum value of the age? And of the height? 

```{r}
#Minimum and maximum of the age:
min(divine$age)
max(divine$age)

#Minimum and maximum of the height:
min(divine$height, na.rm = TRUE)
max(divine$height, na.rm = TRUE)
```

Now calculate directly using the `range()` function. Check the help of the function to know what the function does and its usage.

```{r}
#| eval: false
?range
```

```{r}
range(divine$age)

range(divine$height, na.rm = TRUE)
```

6. Check the age of the 20th subject. Which values of the age are higher than 100?

```{r}
#Age of the 20th subject:
divine$age[20]

#Ages higher than 100:
divine$age[divine$age > 100]
```

7. Calculate the BMI and store it in a new column, knowing that:

$$ \text{BMI} = \frac{\text{Weight (kg)}}{\text{Height (meter)}^2}$$

Note: the height first will have to be converted to meters!

```{r}
divine <- divine |> 
  mutate(
    height = height/100,
    bmi = weight/height^2
  )
```

Now, create a factor variable with the levels of bmi: 

- Underweight: less than 18.5

- Healthy Weight: 18.5 to less than 25

- Overweight: 25 to less than 30

- Obesity: 30 or greater

```{r}
divine <- divine |> 
  mutate(
    bmi_cat = case_when(
      is.na(bmi) ~ NA,
      bmi < 18.5 ~ 1,
      bmi < 25 ~ 2,
      bmi < 30 ~ 3,
      .default = 4
    ),
    bmi_cat = factor(bmi_cat, levels = 1:4, labels = c("Underweight", "Healthy Weight", "Overweight", "Obesity"))
  )
```

How many subjects have obesity?

```{r}
table(divine$bmi_cat)
```

8. Calculate the mean. In which wave patients were younger?  

```{r}
divine |> 
  group_by(covid_wave) |> 
  summarise(mean_age = mean(age))
```

In the 5th wave, older population were vaccinated so were less likely to be admitted to the hospital. This resulted in a greater proportion of younger population.

9. Read the `closure.txt` file containing information about the outcomes of the patients. 

```{r}
closure <- read.table("closure.txt")
```

Join it to the divine database taking in account the variables they have in common. We want to keep only records already existing in the divine database.

```{r}
divine_closure <- divine |> 
  left_join(closure, by = c("record_id", "covid_wave", "center"))
```

Now, imagine that the hospital B asks you about a report of the patients currently smoking or taking alcohol that die in the fifth wave in their hospital. From the database, filter and select the database containing the id, age, sex and time until exitus of the patients, sorted by time to exitus.

```{r}
divine_closure |> 
  filter(center == "Hospital B" & (smoker == "Yes" | alcohol == "Yes") & covid_wave == 5 & exitus == "Yes") |> 
  dplyr::select(record_id, sex, age, time_exitus) |> 
  arrange(time_exitus)
```